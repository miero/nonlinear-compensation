diff --git a/src/pcm/pcm_route.c b/src/pcm/pcm_route.c
index 646517d..9bf2274 100644
--- a/src/pcm/pcm_route.c
+++ b/src/pcm/pcm_route.c
@@ -49,11 +49,15 @@ const char *_snd_module_pcm_route = "";
 #error "Add some code here"
 #endif
 
+/* 10th order polynom = 11 coeffs */
+#define COEFFS 11
+/* index of linear coefficient in as_float */
+#define LINEAR_COEFF_IDX 1
 typedef struct {
 	int channel;
 	int as_int;
 #if SND_PCM_PLUGIN_ROUTE_FLOAT
-	float as_float;
+	float as_float[COEFFS];
 #endif
 } snd_pcm_route_ttable_src_t;
 
@@ -83,7 +87,7 @@ typedef void (*route_f)(const snd_pcm_channel_area_t *dst_area,
 			const snd_pcm_route_params_t *params);
 
 struct snd_pcm_route_ttable_dst {
-	int att;	/* Attenuated */
+	int att;	/* Attenuated (boolean 0, 1) - modifies offset in goto xxxx_labels arrays */
 	unsigned int nsrcs;
 	snd_pcm_route_ttable_src_t* srcs;
 	route_f func;
@@ -288,6 +292,7 @@ static void snd_pcm_route_convert1_many(const snd_pcm_channel_area_t *dst_area,
 					    frames, ttable, params);
 		return;
 	} else if (nsrcs == 1 && src_tt[0].as_int == SND_PCM_PLUGIN_ROUTE_RESOLUTION) {
+		/* just copying */
 		if (params->use_getput)
 			snd_pcm_route_convert1_one_getput(dst_area, dst_offset,
 							  src_areas, src_offset,
@@ -298,18 +303,21 @@ static void snd_pcm_route_convert1_many(const snd_pcm_channel_area_t *dst_area,
 						   src_areas, src_offset,
 						   src_channels,
 						   frames, ttable, params);
+		/* copied, finished */
 		return;
 	}
-
+	/* not just plain copying, more complicated processing */
 	zero = zero_labels[params->sum_idx];
 	get32 = get32_labels[params->get_idx];
-	add = add_labels[params->sum_idx * 2 + ttable->att];
+	add = add_labels[params->sum_idx * 2 + ttable->att  /* _noatt, _att */];
 	norm = norm_labels[params->sum_idx * 2 + ttable->att];
 	put32 = put32_labels[params->put_idx];
 	dst = snd_pcm_channel_area_addr(dst_area, dst_offset);
 	dst_step = snd_pcm_channel_area_step(dst_area);
 
 	while (frames-- > 0) {
+        int i;
+        double coeff;
 		snd_pcm_route_ttable_src_t *ttp = src_tt;
 		sum_t sum;
 
@@ -345,10 +353,40 @@ static void snd_pcm_route_convert1_many(const snd_pcm_channel_area_t *dst_area,
 			goto after_sum;
 #if SND_PCM_PLUGIN_ROUTE_FLOAT
 		add_float_att:
-			sum.as_float += sample * ttp->as_float;
+			/* offset */
+			coeff = ttp->as_float[0];
+           //printf("sample: %d: \n", sample);
+			if (coeff != 0) {
+                sum.as_float += coeff;
+			}
+            //printf("0: %f ->  %f\n", coeff, sum.as_float);
+			/* linear */
+            coeff = ttp->as_float[1];
+            if (coeff != 0) {
+                sum.as_float += coeff * sample;
+            }
+            //printf("1: %f ->  %f\n", coeff, sum.as_float);
+			/* polynom higher orders */
+			double scaledsample = ((float) sample)/2147483647;
+			double scaled_higher_orders = 0;
+			for(i = 2; i < COEFFS; ++i) {
+                coeff = ttp->as_float[i];
+                if (coeff != 0) {
+                    scaled_higher_orders += coeff * pow(scaledsample, i);
+                    //printf("%d: %f x %f ->  %f\n", i, coeff, scaledsample, scaled_higher_orders);
+                }
+			}
+
+			if (scaled_higher_orders != 0) {
+			    float higher_orders = scaled_higher_orders * 2147483647;
+			    sum.as_float += higher_orders;
+			    //printf("higher: %f ->  %f\n", higher_orders, sum.as_float);
+			}
+
 			goto after_sum;
 		add_float_noatt:
 			if (ttp->as_int)
+				/* eventhough float section, this operation is controlled by as_int */
 				sum.as_float += sample;
 			goto after_sum;
 #endif
@@ -690,7 +728,19 @@ static void snd_pcm_route_dump(snd_pcm_t *pcm, snd_output_t *out)
 			snd_pcm_route_ttable_src_t *s = &d->srcs[src];
 			if (d->att)
 #if SND_PCM_PLUGIN_ROUTE_FLOAT
-				snd_output_printf(out, "%d*%g", s->channel, s->as_float);
+				snd_output_printf(out, "%d * [ %g %g %g %g %g %g %g %g %g %g %g ]", s->channel,
+				s->as_float[0],
+				s->as_float[1],
+				s->as_float[2],
+				s->as_float[3],
+				s->as_float[4],
+				s->as_float[5],
+				s->as_float[6],
+				s->as_float[7],
+				s->as_float[8],
+				s->as_float[9],
+				s->as_float[10]
+				 );
 #else
 				snd_output_printf(out, "%d*%g", s->channel, (double)s->as_int / (double)SND_PCM_PLUGIN_ROUTE_RESOLUTION);
 #endif
@@ -916,6 +966,9 @@ static const snd_pcm_ops_t snd_pcm_route_ops = {
 	.set_chmap = NULL, /* NYI */
 };
 
+/*
+ * filling params with ttable
+ */
 static int route_load_ttable(snd_pcm_route_params_t *params, snd_pcm_stream_t stream,
 			     unsigned int tt_ssize,
 			     snd_pcm_route_ttable_entry_t *ttable,
@@ -943,33 +996,80 @@ static int route_load_ttable(snd_pcm_route_params_t *params, snd_pcm_stream_t st
 	params->dsts = dptr;
 	for (dst_channel = 0; dst_channel < dused; ++dst_channel) {
 		snd_pcm_route_ttable_entry_t t = 0;
-		int att = 0;
+		int att = 0; // flag notifying attenuation needs to be performed
 		int nsrcs = 0;
+		unsigned int i;
 		snd_pcm_route_ttable_src_t srcs[sused];
 		for (src_channel = 0; src_channel < sused; ++src_channel) {
+			/* reading coeffs */
 			snd_pcm_route_ttable_entry_t v;
-			v = ttable[src_channel * smul + dst_channel * dmul];
-			if (v != 0) {
+			 /* TODO - fix original int code for non-float archs */
+			/* reading coeffs from ttable */
+			int schannel_coeffs_start_idx = (src_channel * smul + dst_channel * dmul) * COEFFS;
+			printf("schannel_coeffs_start_idx %d\n", schannel_coeffs_start_idx);
+			int has_zero_coeffs = 1;
+			int has_unity_gain = 1;
+			// static offset check (coefficient for 0th order)
+			printf("debug route_load_ttable 1\n");
+			if (ttable[schannel_coeffs_start_idx] != 0) {
+                printf("debug route_load_ttable 2\n");
+				has_zero_coeffs = 0;
+				has_unity_gain = 0;
+			}
+			// linear gain check
+			if (ttable[schannel_coeffs_start_idx + LINEAR_COEFF_IDX] != 0) {
+                printf("debug route_load_ttable 3\n");
+				has_zero_coeffs = 0;
+				if (ttable[schannel_coeffs_start_idx + LINEAR_COEFF_IDX] != SND_PCM_PLUGIN_ROUTE_FULL) {
+                    printf("debug route_load_ttable 4\n");
+                    has_unity_gain = 0;
+                }
+			}
+
+			for(i = 2; i < COEFFS; ++i) {
+				if (ttable[schannel_coeffs_start_idx + i] != 0) {
+					has_zero_coeffs = 0;
+					has_unity_gain = 0;
+					break;
+				}
+			}
+            printf("has_zero_coeffs %d, has_unity_gain %d\n", has_zero_coeffs, has_unity_gain);
+			if (!has_zero_coeffs) {
+				/* do some operation */
 				srcs[nsrcs].channel = src_channel;
+
 #if SND_PCM_PLUGIN_ROUTE_FLOAT
 				/* Also in user space for non attenuated */
-				srcs[nsrcs].as_int = (v == SND_PCM_PLUGIN_ROUTE_FULL ? SND_PCM_PLUGIN_ROUTE_RESOLUTION : 0);
-				srcs[nsrcs].as_float = v;
+				/* as_int ==  SND_PCM_PLUGIN_ROUTE_RESOLUTION => plain copying for single channel in method snd_pcm_route_convert1_many
+				 * that is satisfied for linear = 1 and 0 the rest
+				*/
+
+				srcs[nsrcs].as_int = (has_unity_gain ? SND_PCM_PLUGIN_ROUTE_RESOLUTION : 0);
+				/* copying all coeffs */
+				for (i = 0; i < COEFFS; ++i) {
+					srcs[nsrcs].as_float[i] = ttable[schannel_coeffs_start_idx + i];
+				}
+				/* v is used in #if 0-ed assert later in this method, let's use linear coefficient */
+                v = ttable[schannel_coeffs_start_idx + LINEAR_COEFF_IDX];
 #else
+                v = ttable[schannel_coeffs_start_idx];
 				assert(v >= 0 && v <= SND_PCM_PLUGIN_ROUTE_FULL);
 				srcs[nsrcs].as_int = v;
 #endif
-				if (v != SND_PCM_PLUGIN_ROUTE_FULL)
+				if (!has_zero_coeffs && !has_unity_gain)
+					/* attenuation needed */
 					att = 1;
 				t += v;
 				nsrcs++;
 			}
 		}
 #if 0
+        /*  works properly only for int arch, for float with polynoms v holds only linear coefficient */
 		assert(t <= SND_PCM_PLUGIN_ROUTE_FULL);
 #endif
 		dptr->att = att;
 		dptr->nsrcs = nsrcs;
+		/* choosing conversion function */
 		if (nsrcs == 0)
 			dptr->func = snd_pcm_route_convert1_zero;
 		else
@@ -1045,6 +1145,7 @@ int snd_pcm_route_open(snd_pcm_t **pcmp, const char *name,
 	pcm->tstamp_type = slave->tstamp_type;
 	snd_pcm_set_hw_ptr(pcm, &route->plug.hw_ptr, -1, 0);
 	snd_pcm_set_appl_ptr(pcm, &route->plug.appl_ptr, -1, 0);
+	/* copying ttable to params */
 	err = route_load_ttable(&route->params, pcm->stream, tt_ssize, ttable, tt_cused, tt_sused);
 	if (err < 0) {
 		snd_pcm_close(pcm);
@@ -1094,6 +1195,7 @@ static int _snd_pcm_route_determine_ttable(snd_config_t *tt,
 			}
 			if (schannel + 1 > ssize)
 				ssize = schannel + 1;
+			// v teto metode se jen zjistuji dimenze tabulky, parametry se nenacitaji
 		}
 	}
 	if (csize == 0 || ssize == 0) {
@@ -1102,6 +1204,34 @@ static int _snd_pcm_route_determine_ttable(snd_config_t *tt,
 	}
 	*tt_csize = csize;
 	*tt_ssize = ssize;
+	printf("snd_pcm_route_determine_ttable: csize %ld, ssize %ld\n", csize, ssize);
+	return 0;
+}
+
+/**
+ * \brief Returns float value of a configuration node, accepts integer and float
+ * \param[in] node config node
+ * \param[out] value The node's value.
+ * \return Zero if successful, otherwise a negative error code.
+ *
+ * \par Errors:
+ * <dl>
+ * <dt>-EINVAL<dd>\a config is not a real-number or integer-number node.
+ * </dl>
+ */
+int route_get_number(const snd_config_t *node, double *value) {
+	/* trying float */
+	int err = snd_config_get_real(node, value);
+	if (err < 0) {
+		/* trying int */
+		long v;
+		err = snd_config_get_integer(node, &v);
+		if (err < 0) {
+			return err;
+		} else {
+			(*value) = v;
+		}
+	}
 	return 0;
 }
 
@@ -1130,70 +1260,117 @@ int snd_pcm_route_determine_ttable(snd_config_t *tt,
  * \param schannels Slave channels
  * \retval zero on success otherwise a negative error code
  */
-static int _snd_pcm_route_load_ttable(snd_config_t *tt, snd_pcm_route_ttable_entry_t *ttable,
-				      unsigned int tt_csize, unsigned int tt_ssize,
-				      unsigned int *tt_cused, unsigned int *tt_sused,
-				      int schannels, snd_pcm_chmap_t *chmap)
+int snd_pcm_route_load_ttable(snd_config_t *tt, snd_pcm_route_ttable_entry_t *ttable,
+							  unsigned int tt_csize, unsigned int tt_ssize,
+							  unsigned int *tt_cused, unsigned int *tt_sused,
+							  int schannels)
 {
 	int cused = -1;
 	int sused = -1;
 	snd_config_iterator_t i, inext;
 	unsigned int k;
 	int err;
-	for (k = 0; k < tt_csize * tt_ssize; ++k)
+	/* zeroing the table values */
+	for (k = 0; k < tt_csize * tt_ssize * COEFFS; ++k)
 		ttable[k] = 0.0;
 	snd_config_for_each(i, inext, tt) {
+		/* loading one client config */
 		snd_config_t *in = snd_config_iterator_entry(i);
-		snd_config_iterator_t j, jnext;
+		snd_config_iterator_t slave_it, slave_nextit;
 		long cchannel;
 		const char *id;
 		if (snd_config_get_id(in, &id) < 0)
 			continue;
 		err = safe_strtol(id, &cchannel);
-		if (err < 0 || 
-		    cchannel < 0 || (unsigned int) cchannel > tt_csize) {
+		if (err < 0 ||
+			cchannel < 0 || (unsigned int) cchannel > tt_csize) {
 			SNDERR("Invalid client channel: %s", id);
 			return -EINVAL;
 		}
 		if (snd_config_get_type(in) != SND_CONFIG_TYPE_COMPOUND)
 			return -EINVAL;
-		snd_config_for_each(j, jnext, in) {
-			snd_config_t *jnode = snd_config_iterator_entry(j);
+		printf("debug 1\n");
+		snd_config_for_each(slave_it, slave_nextit, in) {
+			/* loading one slave config for cchannel */
+			snd_config_t *slave_node = snd_config_iterator_entry(slave_it);
+			printf("debug 2\n");
+
 			double value;
-			int ss;
-			long *scha = alloca(tt_ssize * sizeof(long));
-			const char *id;
-			if (snd_config_get_id(jnode, &id) < 0)
+			long schannel;
+			const char *slave_id;
+			if (snd_config_get_id(slave_node, &slave_id) < 0)
 				continue;
-
-			ss = strtochannel(id, chmap, scha, tt_ssize);
-			if (ss < 0) {
-				SNDERR("Invalid slave channel: %s", id);
+			err = safe_strtol(slave_id, &schannel);
+			if (err < 0 ||
+				schannel < 0 || (unsigned int) schannel > tt_ssize ||
+				(schannels > 0 && schannel >= schannels)) {
+				SNDERR("Invalid slave channel: %s", slave_id);
 				return -EINVAL;
 			}
-
-			err = snd_config_get_real(jnode, &value);
-			if (err < 0) {
-				long v;
-				err = snd_config_get_integer(jnode, &v);
-				if (err < 0) {
-					SNDERR("Invalid type for %s", id);
-					return -EINVAL;
+			/* loading cchannel - schannel coeffs */
+			/* 3 possible node types
+             *  a) linear scale - float (real)
+             *  b) linear scale - integer
+             *  c) polynom - string "polynom" followed with compound node
+             */
+			// TODO - add support for non-float ifdef!
+			int coeffs_start_idx = (cchannel * tt_ssize + schannel) * COEFFS;
+			printf("cchannel: %ld, tt_ssize: %d, schannel: %ld\n", cchannel, tt_ssize, schannel);
+			printf("debug 3\n");
+			if (route_get_number(slave_node, &value) == 0) {
+				printf("debug 4\n");
+				/* found number value */
+				/*  a) linear scale - float (real)
+                 *  b) linear scale - integer
+                 */
+				ttable[coeffs_start_idx + LINEAR_COEFF_IDX] = value;
+				printf("Inserting value %f to ttable at position %d\n", value, coeffs_start_idx + LINEAR_COEFF_IDX);
+			} else {
+				/* c) polynom - string "polynom" followed with compound node */
+				/* loading one node for polynom */
+				snd_config_iterator_t poly_node_it, poly_nextit;
+				printf("debug 5\n");
+				snd_config_for_each(poly_node_it, poly_nextit, slave_node) {
+					printf("debug 6\n");
+					snd_config_t *poly_node = snd_config_iterator_entry(poly_node_it);
+					if (snd_config_get_type(poly_node) == SND_CONFIG_TYPE_COMPOUND) {
+						/* id must be polynom */
+						const char *poly_node_id;
+						if (snd_config_get_id(poly_node, &poly_node_id) < 0)
+							/* no id found! */
+							continue;
+						if (strcmp(poly_node_id, "polynom") != 0) {
+							SNDERR("Invalid slave channel: %s - unknown compound node %s", slave_id, poly_node_id);
+							return -EINVAL;
+						}
+						/* node OK, reading coeffs */
+						snd_config_iterator_t coeff_node_it, coeff_nextit;
+						int coeff_idx = 0;
+						snd_config_for_each(coeff_node_it, coeff_nextit, poly_node) {
+							if (coeff_idx >= COEFFS) {
+								SNDERR("Too many polynom coefficients for slave: %s, maximum %d, requested %d", slave_id, COEFFS, coeff_idx + 1);
+								return -EINVAL;
+							}
+							snd_config_t *coeff_node = snd_config_iterator_entry(coeff_node_it);
+							if (route_get_number(coeff_node, &value) != 0) {
+								SNDERR("Invalid polynom coefficient for slave: %s", slave_id);
+								return -EINVAL;
+							}
+							ttable[coeffs_start_idx + coeff_idx] = value;
+							printf("Inserting value %f to ttable at position %d\n", value, coeffs_start_idx + coeff_idx);
+							++coeff_idx;
+						}
+					}
 				}
-				value = v;
 			}
-
-			for (k = 0; (int) k < ss; k++) {
-				long schannel = scha[k];
-				if (schannel < 0 || (unsigned int) schannel > tt_ssize ||
-				    (schannels > 0 && schannel >= schannels)) {
-					SNDERR("Invalid slave channel: %s", id);
-					return -EINVAL;
-				}
-				ttable[cchannel * tt_ssize + schannel] = value;
-				if (schannel > sused)
-					sused = schannel;
+			if (err < 0) {
+				SNDERR("Invalid type for %s", id);
+				return -EINVAL;
 			}
+
+
+			if (schannel > sused)
+				sused = schannel;
 		}
 		if (cchannel > cused)
 			cused = cchannel;
@@ -1203,26 +1380,6 @@ static int _snd_pcm_route_load_ttable(snd_config_t *tt, snd_pcm_route_ttable_ent
 	return 0;
 }
 
-/**
- * \brief Load route matrix
- * \param tt Configuration root describing route matrix
- * \param ttable Returned route matrix
- * \param tt_csize Client size in elements
- * \param tt_ssize Slave size in elements
- * \param tt_cused Used client elements
- * \param tt_sused Used slave elements
- * \param schannels Slave channels
- * \retval zero on success otherwise a negative error code
- */
-int snd_pcm_route_load_ttable(snd_config_t *tt, snd_pcm_route_ttable_entry_t *ttable,
-			      unsigned int tt_csize, unsigned int tt_ssize,
-			      unsigned int *tt_cused, unsigned int *tt_sused,
-			      int schannels)
-{
-	return _snd_pcm_route_load_ttable(tt, ttable, tt_csize, tt_ssize,
-					  tt_cused, tt_sused, schannels, NULL);
-}
-
 /*! \page pcm_plugins
 
 \section pcm_plugins_route Plugin: Route & Volume
@@ -1248,6 +1405,8 @@ pcm.name {
         ttable {                # Transfer table (bi-dimensional compound of cchannels * schannels numbers)
                 CCHANNEL {
                         SCHANNEL REAL   # route value (0.0 - 1.0)
+                        # or
+                        polynom { up to 10 real numbers}    # a0 + a1*x + a2 * x^2 + a3 * x^3 ...
                 }
         }
 }
@@ -1361,14 +1520,16 @@ int _snd_pcm_route_open(snd_pcm_t **pcmp, const char *name,
 		snd_pcm_close(spcm);
 		return err;
 	}
-	ttable = malloc(csize * ssize * sizeof(snd_pcm_route_ttable_entry_t));
+	// tady to bylo jen pro jedno, cislo, ale my jich mame COEFFS
+	//ttable = malloc(csize * ssize * sizeof(snd_pcm_route_ttable_entry_t));
+	ttable = malloc(csize * ssize * COEFFS * sizeof(snd_pcm_route_ttable_entry_t));
 	if (ttable == NULL) {
 		free(chmap);
 		snd_pcm_close(spcm);
 		return -ENOMEM;
 	}
-	err = _snd_pcm_route_load_ttable(tt, ttable, csize, ssize,
-					&cused, &sused, schannels, chmap);
+	err = snd_pcm_route_load_ttable(tt, ttable, csize, ssize,
+					&cused, &sused, schannels);
 	if (err < 0) {
 		free(chmap);
 		free(ttable);
@@ -1376,10 +1537,12 @@ int _snd_pcm_route_open(snd_pcm_t **pcmp, const char *name,
 		return err;
 	}
 
+	// tady prekopirouje ttable do params
 	err = snd_pcm_route_open(pcmp, name, sformat, schannels,
 				 ttable, ssize,
 				 cused, sused,
 				 spcm, 1);
+	/* ttable not needed any more */
 	free(ttable);
 	if (err < 0) {
 		free(chmap);
